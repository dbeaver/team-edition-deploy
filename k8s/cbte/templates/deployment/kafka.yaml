apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ .Release.Name }}-net: "true"
        app: kafka
    spec:
      securityContext:
        runAsUser: 1001
        fsGroup: 1001
      containers:
        - image: dbeaver/cloudbeaver-kafka:3.2
          imagePullPolicy: "IfNotPresent"
          name: kafka
          env:
            # KRaft settings
            - name: KAFKA_CFG_NODE_ID
              value: "0"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "controller,broker"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: "0@kafka:9093"
            # Listeners
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:9093"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://:9092"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
          ports:
            - containerPort: 9092
          resources: {}
          volumeMounts:
            - mountPath: /bitnami
              name: {{ .Release.Name }}-kafka-data
      hostname: kafka
      restartPolicy: Always
      volumes:
        - name: {{ .Release.Name }}-kafka-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-kafka-data
status: {}
